#!/bin/bash
#
# Provisioning and management script for all containers.
#
# This is a low level script that will:
#	Pull the complete list of WPLib container components from Docker Hub into local JSON files.
#	Manage containers - stop/start and most importantly creating containers using the embedded JSON string in the image.

source /opt/box/cli/includes/functions

# Return codes from functions.
RETURN_OK="0"
RETURN_NO_IMAGE_NAME="1"
RETURN_NO_LOCAL_IMAGE="2"
RETURN_NO_IMAGE_JSON="3"
RETURN_NO_IMAGE_REPO="4"
RETURN_INVALID_PROJECT="5"


ctrl_c()
{
        tput sgr0
	echo ""
	echo "$ECHO_PREFIX Aborting script."
	exit
}

trap ctrl_c INT


HelpMe()
{
	cat <<EOF
${GREEN}Service control${RESET}
box component ${GREEN}install${RESET} <component>	- Install and configure a component.
box component ${GREEN}uninstall${RESET} <component>	- Uninstall a component.
box component ${GREEN}activate${RESET} <component>	- Activate a component.
box component ${GREEN}deactivate${RESET} <component>	- Activate a component.
box component ${GREEN}start${RESET} <component>		- Start a component.
box component ${GREEN}stop${RESET} <component>		- Stop a component.
box component ${GREEN}list${RESET} [component]		- List currently installed components.
box component ${GREEN}upgrade${RESET} <component>	- Upgrade an existing component.

${GREEN}Service management${RESET}
box component ${GREEN}update${RESET}			- Update available components list.
box component ${GREEN}show${RESET}			- Show the list of components available.
box component ${GREEN}shutdown${RESET}			- Shutdown all WPLib related components.
box component ${GREEN}clean${RESET}			- Remove all WPLib related components.
box component ${GREEN}inspect${RESET} <component>	- Provide detailed info on a components.
box component ${GREEN}log${RESET} <component>		- Show log files from components.
box component ${GREEN}pull${RESET} <component>		- Just pull a component image. No install.
EOF
}


################################################################################
CMD="$1"
shift
IMAGES="$@"

case $CMD in
	'list'|'ls')
		# Only the 'ls' command can accept no image.
		#echo "$@"
		if [ "$1" == "" ]
		then
			component_list
		fi
		;;

	'show')
		component_show
		exit $?
		;;

	'update')
		update_components
		exit $?
		;;

	'reallyclean')
		reallyclean
		exit $?
		;;

	'shutdown')
		shutdown
		exit $?
		;;

	'shell')
		IMAGE="$1"
		shift
		ARGS="$@"
		component_shell "$@"
		;;

	'exec')
		IMAGE="$1"
		shift
		ARGS="$@"
		component_exec "$@"
		;;

	''|'help')
		HelpMe
		;;

	*)
		if [ "$1" == "" ]
		then
			error_nip
			HelpMe
			exit 1
		fi
		;;
esac


for IMAGE in $IMAGES
do
	case $CMD in
		'refresh'|'upgrade')
			echo "$ECHO_PREFIX ${GREEN}Refreshing container: ${CYAN}${IMAGE}${RESET}"
			component_stop $IMAGE
			case $? in
				$RETURN_ALREADY_STOPPED|$RETURN_NO_CONTAINER|$RETURN_OK)
					component_remove $IMAGE
					case $? in
						$RETURN_ALREADY_STOPPED|$RETURN_NO_CONTAINER|$RETURN_OK)
							image_remove $IMAGE
							if [ "$?" == "$RETURN_OK" ]
							then
								component_provision $IMAGE
							fi
					esac
					;;
			esac
			;;

		'pull')
			component_image_pull $IMAGE
			RETURN="$?"
			;;

		'install')
			echo "$ECHO_PREFIX ${GREEN}Installing ${CYAN}${IMAGE}.${RESET}"
			component_install $IMAGE
			RETURN="$?"
			;;

		'uninstall')
			echo "$ECHO_PREFIX ${GREEN}Uninstalling: ${CYAN}${IMAGE}${RESET}"
			component_stop $IMAGE
			case $? in
				$RETURN_ALREADY_STOPPED|$RETURN_NO_CONTAINER|$RETURN_OK)
					component_remove $IMAGE
					case $? in
						$RETURN_ALREADY_STOPPED|$RETURN_NO_CONTAINER|$RETURN_OK)
							image_remove $IMAGE
					esac
					;;
			esac
			;;

		'activate')
			echo "$ECHO_PREFIX ${GREEN}Activating ${CYAN}${IMAGE}.${RESET}"
			component_provision $IMAGE
			RETURN="$?"
			;;

		'deactivate')
			echo "$ECHO_PREFIX ${GREEN}Deactivating ${CYAN}${IMAGE}.${RESET}"
			component_remove $IMAGE
			RETURN="$?"
			;;

		'start')
			component_start $IMAGE
			if [ "$?" == "$RETURN_NO_LOCAL_IMAGE" ]
			then
				component_provision $IMAGE
			fi
			;;

		'stop')
			component_stop $IMAGE
			;;

		'list'|'ls')
			component_list $IMAGE
			;;

		'inspect'|'info')
			component_inspect $IMAGE
			;;

		'log')
			component_log $IMAGE
			;;
	esac
done


