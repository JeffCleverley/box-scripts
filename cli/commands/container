#!/bin/bash
#
# Provisioning and management script for all containers.
#
# This is a low level script that will:
#	Pull the complete list of WPLib container packages from Docker Hub into local JSON files.
#	Manage containers - stop/start and most importantly creating containers using the embedded JSON string in the image.

source /opt/box/cli/includes/functions

# Return codes from functions.
RETURN_OK="0"
RETURN_NO_IMAGE_NAME="1"
RETURN_NO_LOCAL_IMAGE="2"
RETURN_NO_IMAGE_JSON="3"
RETURN_NO_IMAGE_REPO="4"
RETURN_INVALID_PROJECT="5"


ctrl_c()
{
        tput sgr0
	echo ""
	echo "$ECHO_PREFIX Aborting script."
	exit
}

trap ctrl_c INT


HelpMe()
{
	cat <<EOF
box container ${GREEN}install${RESET} <package>		- Install and configure a service.
box container ${GREEN}uninstall${RESET} <package>	- Uninstall a service.
box container ${GREEN}ls${RESET} [package]		- List currently installed services.
box container ${GREEN}start${RESET} <package>		- Start a service.
box container ${GREEN}stop${RESET} <package>		- Stop a service.
box container ${GREEN}clean${RESET} <package>		- Remove a service and downloaded image.
box container ${GREEN}refresh${RESET} <package>		- Refresh an existing service.

box container ${GREEN}update${RESET}			- Update service list from repository.
box container ${GREEN}show${RESET}			- Show a list of services available for download.
box container ${GREEN}shutdown${RESET}			- Shutdown all WPLib related packages.
box container ${GREEN}reallyclean${RESET}		- Remove all WPLib related packages.
box container ${GREEN}inspect${RESET} <package>		- Provide detailed info on a service.
box container ${GREEN}log${RESET} <package>		- Show log files from services.
box container ${GREEN}pull${RESET} <package>		- Just pull a service image. No install.
EOF
}


################################################################################
CMD="$1"
shift
IMAGES="$@"

case $CMD in
	'list'|'ls')
		# Only the 'ls' command can accept no image.
		#echo "$@"
		if [ "$1" == "" ]
		then
			service_list
		fi
		;;

	'show')
		service_show
		exit $?
		;;

	'update')
		update_services
		exit $?
		;;

	'reallyclean')
		reallyclean
		exit $?
		;;

	'shutdown')
		shutdown
		exit $?
		;;

	'shell')
		IMAGE="$1"
		shift
		ARGS="$@"
		service_shell "$@"
		;;

	'exec')
		IMAGE="$1"
		shift
		ARGS="$@"
		service_exec "$@"
		;;

	''|'help')
		HelpMe
		;;

	*)
		if [ "$1" == "" ]
		then
			error_nip
			HelpMe
			exit 1
		fi
		;;
esac


for IMAGE in $IMAGES
do
	case $CMD in
		'refresh'|'upgrade')
			echo "$ECHO_PREFIX ${GREEN}Refreshing container: ${CYAN}${IMAGE}${RESET}"
			service_stop $IMAGE
			case $? in
				$RETURN_ALREADY_STOPPED|$RETURN_NO_CONTAINER|$RETURN_OK)
					service_remove $IMAGE
					case $? in
						$RETURN_ALREADY_STOPPED|$RETURN_NO_CONTAINER|$RETURN_OK)
							image_remove $IMAGE
							if [ "$?" == "$RETURN_OK" ]
							then
								service_provision $IMAGE
							fi
					esac
					;;
			esac
			;;

		'clean')
			echo "$ECHO_PREFIX ${GREEN}Cleaning up: ${CYAN}${IMAGE}${RESET}"
			service_stop $IMAGE
			case $? in
				$RETURN_ALREADY_STOPPED|$RETURN_NO_CONTAINER|$RETURN_OK)
					service_remove $IMAGE
					case $? in
						$RETURN_ALREADY_STOPPED|$RETURN_NO_CONTAINER|$RETURN_OK)
							image_remove $IMAGE
					esac
					;;
			esac
			;;

		'pull')
			service_image_pull $IMAGE
			RETURN="$?"
			;;

		'install')
			echo "$ECHO_PREFIX ${GREEN}Installing ${CYAN}${IMAGE}.${RESET}"
			service_install $IMAGE
			RETURN="$?"
			;;

		'provision')
			echo "$ECHO_PREFIX ${GREEN}Provisioning ${CYAN}${IMAGE}.${RESET}"
			service_provision $IMAGE
			RETURN="$?"
			;;

		'uninstall')
			service_remove $IMAGE
			RETURN="$?"
			;;

		'start')
			service_start $IMAGE
			if [ "$?" == "$RETURN_NO_LOCAL_IMAGE" ]
			then
				service_provision $IMAGE
			fi
			;;

		'stop')
			service_stop $IMAGE
			;;

		'list'|'ls')
			service_list $IMAGE
			;;

		'inspect'|'info')
			service_inspect $IMAGE
			;;

		'log')
			service_log $IMAGE
			;;
	esac
done


